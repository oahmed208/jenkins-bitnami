global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

clusterDomain: cluster.local

image:
  registry: docker.io
  repository: bitnami/jenkins
  tag: 2.387.2-debian-11-r0
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false


jenkinsUser: user

jenkinsPassword: ""
## @param jenkinsHost Jenkins host to create application URLs
##
jenkinsHost: ""
## @param jenkinsHome Jenkins home directory
##
jenkinsHome: /bitnami/jenkins/home
## @param javaOpts Custom JVM parameters
##
javaOpts: []
args: []

extraEnvVarsSecret: ""

plugins: []

extraPlugins: []
## @param latestPlugins Set to true to download the latest version of all dependencies, even if the version(s) of the requested plugin(s) are not the latest.
##
latestPlugins: true

initScripts: {}

## @section Jenkins TLS configuration
##
## @section Jenkins Configuration as Code plugin settings (EXPERIMENTAL)
## The values under this section require that the plugin 'configuration-as-code' is installed.
## All the configuration-as-code values are rendered as a template.
##
configAsCode:
  ## @param configAsCode.enabled Enable configuration as code.
  ##
  enabled: false
  ## @param configAsCode.extraConfigFiles List of additional configuration-as-code files to be mounted
  ## E.g.:
  ##  welcome-message.yaml: |-
  ##    jenkins:
  ##      systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
  ##
  extraConfigFiles: {}
  ## @param configAsCode.securityRealm Content of the 'securityRealm' block
  ##
  securityRealm: {}
  ## @param configAsCode.authorizationStrategy Content of the 'authorizationStrategy' block
  ##
  authorizationStrategy: {}
  ## @param configAsCode.security Content of the 'security' block
  ##
  security: {}
  ## @param configAsCode.extraJenkins Append additional settings under the 'jenkins' block
  ##
  extraJenkins: {}
  ## @param configAsCode.extraConfig Append additional settings at the root of the configuration-as-code file
  ##
  extraConfig: {}
  ## @param configAsCode.extraKubernetes Append additional settings under the Kubernetes cloud block
  ## NOTE: This value will only take effect if agent.enabled=true
  ##
  extraKubernetes: {}
  ## @param configAsCode.extraClouds Additional clouds
  ## NOTE: This value will only take effect if agent.enabled=true
  ##
  extraClouds: []
  ## @param configAsCode.existingConfigmap Name of an existing configmap containing the config-as-code files.
  ##
  existingConfigmap: ""
  ## Configuration auto-reload sidecar container
  ##
  autoReload:
    ## @param configAsCode.autoReload.enabled Enable the creation of the autoReload sidecar container.
    ## Note: This container will trigger the configuration reload each time the Configmap is updated. Changes applied via Jenkins UI will be overwritten.
    ## If disabled, config as code files will only take effect during the container first boot.
    ##
    enabled: true
    ## @param configAsCode.autoReload.initialDelay In seconds, time
    ##
    initialDelay: 360
    ## @param configAsCode.autoReload.reqRetries
    ##
    reqRetries: 12
    ## @param configAsCode.autoReload.interval
    ##
    interval: 10
    ## @param configAsCode.autoReload.command
    ##
    command: []
    ## @param configAsCode.autoReload.args
    ##
    args: []
    ## @param configAsCode.autoReload.extraEnvVars
    ##
    extraEnvVars: []
    ## @param configAsCode.autoReload.extraEnvVarsSecret
    ##
    extraEnvVarsSecret: ""
    ## @param configAsCode.autoReload.extraEnvVarsCM
    ##
    extraEnvVarsCM: ""
    ## @param configAsCode.autoReload.extraVolumeMounts
    ##
    extraVolumeMounts: []
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param configAsCode.autoReload.containerSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context
    ## @param configAsCode.autoReload.containerSecurityContext.runAsUser Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser
    ## @param configAsCode.autoReload.containerSecurityContext.runAsNonRoot Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
    ## @param configAsCode.autoReload.containerSecurityContext.readOnlyRootFilesystem Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      readOnlyRootFilesystem: false
##
service:
  ## @param service.type Jenkins service type
  ##
  type: ClusterIP
  ## @param service.ports.http Jenkins service HTTP port
  ## @param service.ports.https Jenkins service HTTPS port
  ##
  ports:
    http: 80
    https: 443
  ## Node ports to expose
  ## @param service.nodePorts.http Node port for HTTP
  ## @param service.nodePorts.https Node port for HTTPS
  ## NOTE: choose port between <30000-32767>
  ##
  nodePorts:
    http: ""
    https: ""
  ## @param service.clusterIP Jenkins service Cluster IP
  ## e.g.:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP Jenkins service Load Balancer IP
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges Jenkins service Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy Jenkins service external traffic policy
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for Jenkins service
  ##
  annotations: {}
  ## @param service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
  ##
  extraPorts: []
  ## @param service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  ## If "ClientIP", consecutive client requests will be directed to the same Pod
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}

## Jenkins agent listener service parameters
## NOTE: ignored if agent.enabled=false
##
agentListenerService:
  ## @param agentListenerService.enabled
  ##
  enabled: true
  ## @param agentListenerService.type Jenkins service type
  ##
  type: ClusterIP
  ## @param agentListenerService.ports.agentListener Jenkins service agent listener port
  ##
  ports:
    agentListener: 50000
  ## Node ports to expose
  ## @param agentListenerService.nodePorts.agentListener Node port for agent listener
  ## NOTE: choose port between <30000-32767>
  ##
  nodePorts:
    agentListener: ""
  ## @param agentListenerService.clusterIP Jenkins service Cluster IP
  ## e.g.:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param agentListenerService.loadBalancerIP Jenkins service Load Balancer IP
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param agentListenerService.loadBalancerSourceRanges Jenkins service Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param agentListenerService.externalTrafficPolicy Jenkins service external traffic policy
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param agentListenerService.annotations Additional custom annotations for Jenkins service
  ##

  extraHosts: []
 
  extraTls: []

  secrets: []
 
ingress:
  ## @param ingress.enabled Enable ingress record generation for Jenkins
  ##
  enabled: true
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.hostname Default host for the ingress record
  ##
  hostname: frodo-tst.orl.eng.hitachivantara.com
  ## @param ingress.path Default path for the ingress record
  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  ##
  path: /
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  annotations:
  kubernetes.io/ingress.class: nginx
  extraRules: []

persistence:
  enabled: true
  storageClass: ""
  existingClaim: ""
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  selector: {}
